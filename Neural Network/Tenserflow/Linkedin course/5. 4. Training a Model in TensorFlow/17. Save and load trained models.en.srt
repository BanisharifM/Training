1
00:00:00.05 --> 00:00:03.00
- [Instructor] So far, we've
built and trained the model.

2
00:00:03.00 --> 00:00:05.06
Now, let's learn how to
save that model to a file,

3
00:00:05.06 --> 00:00:07.04
so that we can reuse it later.

4
00:00:07.04 --> 00:00:11.02
Open up model_checkpoints.py.

5
00:00:11.02 --> 00:00:12.09
Here, we have the code to define

6
00:00:12.09 --> 00:00:14.07
and train the neural network.

7
00:00:14.07 --> 00:00:16.01
But, after the file runs,

8
00:00:16.01 --> 00:00:18.03
the neural network isn't saved anywhere.

9
00:00:18.03 --> 00:00:22.02
Let's go down to Line 95.

10
00:00:22.02 --> 00:00:26.06
To save it, we first need to
create a tf.train.Saver object.

11
00:00:26.06 --> 00:00:28.06
Let's put it here, under
the graph definition,

12
00:00:28.06 --> 00:00:30.08
but before the training loop.

13
00:00:30.08 --> 00:00:31.09
Tf

14
00:00:31.09 --> 00:00:33.01
.train

15
00:00:33.01 --> 00:00:35.04
.Saver.

16
00:00:35.04 --> 00:00:37.08
This is the object we'll
use to save the model.

17
00:00:37.08 --> 00:00:42.02
Now, at the very bottom of the
code, way down on Line 150,

18
00:00:42.02 --> 00:00:43.06
let's go down there.

19
00:00:43.06 --> 00:00:45.01
We can save the model.

20
00:00:45.01 --> 00:00:48.01
To save the model, we just call saver.save

21
00:00:48.01 --> 00:00:50.05
and pass in the session and the file name.

22
00:00:50.05 --> 00:00:54.04
So, we'll call saver.save.

23
00:00:54.04 --> 00:00:57.06
We'll pass in the session
and then the file name

24
00:00:57.06 --> 00:00:59.02
where we want to save it.

25
00:00:59.02 --> 00:01:03.06
I'll use log/trained_model.ckpt.

26
00:01:03.06 --> 00:01:05.04
These files are called checkpoint files,

27
00:01:05.04 --> 00:01:09.01
so they're usually named with
a .ckpt file name extension,

28
00:01:09.01 --> 00:01:11.03
but that's not required.

29
00:01:11.03 --> 00:01:13.01
Then, here on the next
line, we'll just print out

30
00:01:13.01 --> 00:01:15.00
where the file was saved.

31
00:01:15.00 --> 00:01:16.08
Okay, let's run the code.

32
00:01:16.08 --> 00:01:20.03
Right-click and choose Run.

33
00:01:20.03 --> 00:01:22.00
Great, the model was saved.

34
00:01:22.00 --> 00:01:24.04
If we click here on the
logs folder, we can also see

35
00:01:24.04 --> 00:01:27.04
that several new files were created.

36
00:01:27.04 --> 00:01:29.08
Now, let's see how to use the saved model.

37
00:01:29.08 --> 00:01:36.01
Let's close this file and
open up load_checkpoint.py.

38
00:01:36.01 --> 00:01:38.08
Here we have the same
graph definition as before,

39
00:01:38.08 --> 00:01:40.00
but down on Line 98,

40
00:01:40.00 --> 00:01:43.01
you can see that there's no training loop.

41
00:01:43.01 --> 00:01:46.04
Instead, let's go down to Line 104

42
00:01:46.04 --> 00:01:47.09
and load our checkpoint file.

43
00:01:47.09 --> 00:01:51.03
Just call saver.restore

44
00:01:51.03 --> 00:01:54.01
and pass in the session and
the name of the file to load.

45
00:01:54.01 --> 00:01:57.02
So, we'll say session
and the same file name,

46
00:01:57.02 --> 00:02:04.01
logs/trained_model.ckpt.

47
00:02:04.01 --> 00:02:06.06
Now, let's look above on Line 101.

48
00:02:06.06 --> 00:02:09.02
I've commented out this
line for a good reason.

49
00:02:09.02 --> 00:02:11.03
It's important that when
loading from a checkpoint,

50
00:02:11.03 --> 00:02:14.07
you don't call
tf.global_variables_initializer.

51
00:02:14.07 --> 00:02:17.02
Since all the variable values
are loaded from a file,

52
00:02:17.02 --> 00:02:20.05
we don't want to initialize them
back to their default values.

53
00:02:20.05 --> 00:02:22.02
Great, now we can use
the pretrain network,

54
00:02:22.02 --> 00:02:23.02
just like before.

55
00:02:23.02 --> 00:02:24.03
Let's run the code.

56
00:02:24.03 --> 00:02:27.01
Right-click, choose Run,

57
00:02:27.01 --> 00:02:28.07
and we can see that we
get the same result,

58
00:02:28.07 --> 00:02:31.05
using the pretrain model loaded from disk.

